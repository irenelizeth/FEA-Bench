diff --git a/.gitignore b/.gitignore
index 7c8513a..86bba6f 100644
--- a/.gitignore
+++ b/.gitignore
@@ -170,3 +170,5 @@ cython_debug/
 data/repos/copies
 notebooks/
 *logs/
+temp*
+scripts*
\ No newline at end of file
diff --git a/swebench/harness/constants/__init__.py b/swebench/harness/constants/__init__.py
index ad4dcc8..9823ea9 100644
--- a/swebench/harness/constants/__init__.py
+++ b/swebench/harness/constants/__init__.py
@@ -2,20 +2,21 @@ from swebench.harness.constants.constants import *
 from swebench.harness.constants.javascript import *
 from swebench.harness.constants.python import *
 
-MAP_REPO_VERSION_TO_SPECS = {
+MAP_REPO_VERSION_TO_SPECS = DefaultDict({
     **MAP_REPO_VERSION_TO_SPECS_JS,
     **MAP_REPO_VERSION_TO_SPECS_PY,
-}
+})
 
 MAP_REPO_TO_INSTALL = {
     **MAP_REPO_TO_INSTALL_JS,
     **MAP_REPO_TO_INSTALL_PY,
 }
 
-MAP_REPO_TO_EXT = {
+MAP_REPO_TO_EXT = DefaultDict({
     **{k: "js" for k in MAP_REPO_VERSION_TO_SPECS_JS.keys()},
     **{k: "py" for k in MAP_REPO_VERSION_TO_SPECS_PY.keys()},
-}
+    "default": "py"
+})
 
 LATEST = "latest"
 USE_X86 = USE_X86_PY
diff --git a/swebench/harness/constants/python.py b/swebench/harness/constants/python.py
index c37d27f..8735d3a 100644
--- a/swebench/harness/constants/python.py
+++ b/swebench/harness/constants/python.py
@@ -1,3 +1,10 @@
+class DefaultDict(dict):
+    def __getitem__(self, key):
+        try:
+            return super().__getitem__(key)
+        except KeyError:
+            return self.get('default', None)
+
 # Constants - Testing Commands 
 TEST_PYTEST = "pytest --no-header -rA --tb=no -p no:cacheprovider"
 TEST_PYTEST_VERBOSE = "pytest -rA --tb=long -p no:cacheprovider"
@@ -17,28 +24,68 @@ TEST_SYMPY_VERBOSE = "bin/test -C --verbose"
 SPECS_SKLEARN = {
     k: {
         "python": "3.6",
-        "packages": "numpy scipy cython pytest pandas matplotlib",
+        "packages": "numpy scipy cython pytest pandas",
         "install": "python -m pip install -v --no-use-pep517 --no-build-isolation -e .",
         "pip_packages": [
             "cython",
             "numpy==1.19.2",
             "setuptools",
             "scipy==1.5.2",
+            "matplotlib",
         ],
         "test_cmd": TEST_PYTEST,
     }
-    for k in ["0.20", "0.21", "0.22"]
+    for k in ["0.20", "0.21", "0.22", "0.23", "0.24"]
 }
 SPECS_SKLEARN.update(
     {
         k: {
             "python": "3.9",
-            "packages": "'numpy==1.19.2' 'scipy==1.5.2' 'cython==3.0.10' pytest 'pandas<2.0.0' 'matplotlib<3.9.0' setuptools pytest joblib threadpoolctl",
+            "packages": "'numpy==1.19.2' 'scipy==1.5.2' 'cython==3.0.10' pytest 'pandas<2.0.0' setuptools pytest joblib threadpoolctl",
             "install": "python -m pip install -v --no-use-pep517 --no-build-isolation -e .",
-            "pip_packages": ["cython", "setuptools", "numpy", "scipy"],
+            "pip_packages": ["'matplotlib<3.9.0'", "cython==3.0.10", "setuptools", "numpy==1.19.2", "scipy"],
             "test_cmd": TEST_PYTEST,
         }
-        for k in ["1.3", "1.4", "1.5", "1.6"]
+        for k in ["1.3", "1.4"]
+    }
+)
+
+SPECS_SKLEARN.update(
+    {
+        k: {
+            "python": "3.9",
+            "packages": "'numpy==1.19.2' 'scipy==1.5.2' pytest 'pandas<2.0.0' 'setuptools<65' pytest joblib threadpoolctl",
+            "install": "python -m pip install -v --no-use-pep517 --no-build-isolation -e .",
+            "pip_packages": ["'matplotlib<3.9.0'", "cython==0.29.32", "numpy==1.19.2", "scipy"],
+            "test_cmd": TEST_PYTEST,
+        }
+        for k in ["1.2"]
+    }
+)
+
+SPECS_SKLEARN.update(
+    {
+        k: {
+            "python": "3.9",
+            "packages": "'numpy' 'scipy' 'cython==3.0.10' 'pandas<2.0.0' setuptools pytest joblib threadpoolctl",
+            "install": "python -m pip install -v --no-build-isolation -e .",
+            "pip_packages": ["ninja", "meson-python", "'matplotlib<3.9.0'"],
+            "test_cmd": TEST_PYTEST,
+        }
+        for k in ["1.5", "1.6"]
+    }
+)
+
+SPECS_SKLEARN.update(
+    {
+        k: {
+            "python": "3.8",
+            "packages": "'numpy==1.19.2' 'scipy==1.5.2' pytest 'pandas<2.0.0' 'setuptools<65' pytest joblib threadpoolctl",
+            "install": "python -m pip install -v --no-use-pep517 --no-build-isolation -e .",
+            "pip_packages": ["cython==0.29.32", "numpy", "scipy", "'matplotlib<3.9.0'"],
+            "test_cmd": TEST_PYTEST,
+        }
+        for k in ["1.0", "1.1"]
     }
 )
 
@@ -410,7 +457,7 @@ SPECS_MATPLOTLIB.update(
             "pre_install": [
                 "apt-get -y update && apt-get -y upgrade && DEBIAN_FRONTEND=noninteractive apt-get install -y imagemagick ffmpeg libfreetype6-dev pkg-config texlive texlive-latex-extra texlive-fonts-recommended texlive-xetex texlive-luatex cm-super"
             ],
-            "pip_packages": ["pytest", "ipython"],
+            "pip_packages": ["'setuptools<60'", "setuptools-scm==7.1.0", "pytest", "ipython"],
             "test_cmd": TEST_PYTEST,
         }
         for k in ["3.1", "3.2", "3.3", "3.4"]
@@ -825,10 +872,10 @@ SPECS_PVLIB = {
         "python": "3.9",
         "install": "python -m pip install -e .[all]",
         "packages": "pandas scipy",
-        "pip_packages": ["jupyter", "ipython", "matplotlib", "pytest", "flake8"],
+        "pip_packages": ["'numpy<2.0'", "jupyter", "ipython", "matplotlib", "pytest", "flake8"],
         "test_cmd": TEST_PYTEST,
     }
-    for k in ["0.1", "0.2", "0.3", "0.4", "0.5", "0.6", "0.7", "0.8", "0.9"]
+    for k in ["0.1", "0.2", "0.3", "0.4", "0.5", "0.6", "0.7", "0.8", "0.9", '0.10', '0.11']
 }
 
 SPECS_PYDICOM = {
@@ -868,6 +915,74 @@ SPECS_PYDICOM.update(
 
 SPECS_HUMANEVAL = {k: {"python": "3.9", "test_cmd": "python"} for k in ["1.0"]}
 
+SPECS_CONAN = DefaultDict({
+    k: {
+        "python": "3.9",
+        "install": "pip install -e .",
+        # "packages": "",
+        "pip_packages": ["pytest", "bottle", "mock", "webtest", "jwt"],
+        "test_cmd": TEST_PYTEST,
+    }
+    for k in [None, 'default', '2.10', '2.12']
+})
+
+SPECS_PYTORCH_VISION = DefaultDict({
+    k: {
+        "python": "3.9",
+        "install": "pip install -e .",
+        # "packages": "",
+        "pip_packages": ["pytest", "torch"],
+        "test_cmd": TEST_PYTEST,
+    }
+    for k in [None, 'default']
+})
+
+SPECS_ACCELERATE = DefaultDict({
+    k: {
+        "python": "3.9",
+        "install": "pip install torch==2.5.0 ; pip install -e .",
+        # "packages": "",
+        "pip_packages": ["pytest"],
+        "test_cmd": TEST_PYTEST,
+    }
+    for k in [None, 'default']
+})
+
+SPECS_TORTOISE = DefaultDict({
+    k: {
+        "python": "3.9",
+        "install": "pip install -e .",
+        # "packages": "",
+        "pip_packages": ["pydantic", "pytest"],
+        "test_cmd": TEST_PYTEST,
+    }
+    for k in [None, 'default']
+})
+
+SPECS_PYTHON39 = DefaultDict({
+    k: {
+        "python": "3.9",
+        "install": "pip install -e .",
+        # "packages": "",
+        "pip_packages": ["pytest"],
+        "test_cmd": TEST_PYTEST,
+    }
+    for k in [None, 'default']
+})
+
+SPECS_PYTHON310 = DefaultDict({
+    k: {
+        "python": "3.10",
+        "install": "pip install -e .",
+        # "packages": "",
+        "pip_packages": ["pytest"],
+        "test_cmd": TEST_PYTEST,
+    }
+    for k in [None, 'default']
+})
+
+
+
 # Constants - Task Instance Instllation Environment
 MAP_REPO_VERSION_TO_SPECS_PY = {
     "astropy/astropy": SPECS_ASTROPY,
@@ -890,6 +1005,18 @@ MAP_REPO_VERSION_TO_SPECS_PY = {
     "sqlfluff/sqlfluff": SPECS_SQLFLUFF,
     "swe-bench/humaneval": SPECS_HUMANEVAL,
     "sympy/sympy": SPECS_SYMPY,
+
+    "huggingface/datasets": SPECS_PYTHON310,
+    "huggingface/accelerate": SPECS_ACCELERATE,
+    "encode/django-rest-framework": SPECS_PYTHON310,
+    "twisted/twisted": SPECS_PYTHON310,
+    "Cog-Creators/Red-DiscordBot": SPECS_PYTHON310,
+    "conan-io/conan": SPECS_CONAN,
+    "pytorch/vision": SPECS_PYTORCH_VISION,
+    "gradio-app/gradio": SPECS_PYTHON310,
+    "tensorflow/datasets": SPECS_PYTHON310,
+    "tortoise/tortoise-orm": SPECS_TORTOISE,
+    "default": SPECS_PYTHON39,
 }
 
 # Constants - Repository Specific Installation Instructions
diff --git a/swebench/harness/log_parsers/__init__.py b/swebench/harness/log_parsers/__init__.py
index 295ef21..6fb12e5 100644
--- a/swebench/harness/log_parsers/__init__.py
+++ b/swebench/harness/log_parsers/__init__.py
@@ -1,8 +1,8 @@
 from swebench.harness.log_parsers.javascript import MAP_REPO_TO_PARSER_JS
-from swebench.harness.log_parsers.python import MAP_REPO_TO_PARSER_PY
+from swebench.harness.log_parsers.python import MAP_REPO_TO_PARSER_PY, DefaultDict
 from swebench.harness.log_parsers.utils import get_eval_type
 
-MAP_REPO_TO_PARSER = {
+MAP_REPO_TO_PARSER = DefaultDict({
     **MAP_REPO_TO_PARSER_JS,
     **MAP_REPO_TO_PARSER_PY,
-}
\ No newline at end of file
+})
\ No newline at end of file
diff --git a/swebench/harness/log_parsers/python.py b/swebench/harness/log_parsers/python.py
index a8c5a93..f67cfe2 100644
--- a/swebench/harness/log_parsers/python.py
+++ b/swebench/harness/log_parsers/python.py
@@ -260,7 +260,15 @@ parse_log_scikit = parse_log_pytest_v2
 parse_log_sphinx = parse_log_pytest_v2
 
 
-MAP_REPO_TO_PARSER_PY = {
+class DefaultDict(dict):
+    def __getitem__(self, key):
+        try:
+            return super().__getitem__(key)
+        except KeyError:
+            return self.get('default', None)
+
+
+MAP_REPO_TO_PARSER_PY = DefaultDict({
     "astropy/astropy": parse_log_astropy,
     "django/django": parse_log_django,
     "marshmallow-code/marshmallow": parse_log_marshmallow,
@@ -279,4 +287,5 @@ MAP_REPO_TO_PARSER_PY = {
     "sqlfluff/sqlfluff": parse_log_sqlfluff,
     "sphinx-doc/sphinx": parse_log_sphinx,
     "sympy/sympy": parse_log_sympy,
-}
+    "default": parse_log_pytest_v2,
+})
diff --git a/swebench/harness/test_spec/python.py b/swebench/harness/test_spec/python.py
index 235751d..1535824 100644
--- a/swebench/harness/test_spec/python.py
+++ b/swebench/harness/test_spec/python.py
@@ -194,6 +194,27 @@ def make_repo_script_list_py(specs, repo, repo_directory, base_commit, env_name)
     return setup_commands
 
 
+def replace_uninstallable_packages_requirements_txt(requirement_str: str) -> str:
+    """Replaces certain packages in a requirements.txt-like string.
+    For example, some packages have been yanked and we need to replace them with compatible alternatives.
+    """
+    replacements = {
+        # See https://github.com/princeton-nlp/SWE-bench/issues/199
+        # This package was sinced yanked, so we need to force pip
+        # to install it.
+        "types-pkg_resources": "types-pkg-resources==0.1.3",
+    }
+    requirements = [req.strip() for req in requirement_str.split("\n") if req.strip()]
+    requirements_replaced = []
+    for requirement in requirements:
+        if requirement in replacements:
+            print(f"Replaced {requirement!r} with {replacements[requirement]!r} (replace_uninstallable_packages)")
+            requirements_replaced.append(replacements[requirement])
+        else:
+            requirements_replaced.append(requirement)
+    return "\n".join(requirements_replaced) + "\n"
+
+
 def make_env_script_list_py(instance, specs, env_name) -> list:
     """
     Creates the list of commands to set up the conda environment for testing.
@@ -211,7 +232,7 @@ def make_env_script_list_py(instance, specs, env_name) -> list:
         reqs_commands.append(cmd)
 
         # Install dependencies
-        reqs = get_requirements(instance)
+        reqs = replace_uninstallable_packages_requirements_txt(get_requirements(instance))
         path_to_reqs = "$HOME/requirements.txt"
         reqs_commands.append(
             f"cat <<'{HEREDOC_DELIMITER}' > {path_to_reqs}\n{reqs}\n{HEREDOC_DELIMITER}"
